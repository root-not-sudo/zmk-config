/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <150>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };


       combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };



    };

        keymap {
                compatible = "zmk,keymap";

            default_layer {
        bindings = <
        &kp SQT   &kp COMMA  &kp PERIOD  &kp P  &kp Y                       &kp F  &kp G  &kp C     &kp R    &kp L
        &kp A     &kp O      &kp E       &kp U  &kp I                       &kp D  &kp H  &kp T     &kp N    &kp S
        &kp SEMI  &kp Q      &kp J       &kp K  &mt LALT X                  &kp N  &kp M  &kp CMMA  &kp DOT  &mt LSFT RET
                            &mt LSHFT TAB  &lt 1 SPACE                     &lt 2 RET  &mt LCTRL BSPC
        >;
        };

            left_layer {
        bindings = <
        &kp PSCRN  &kp LC(F)    &kp LC(Z)  &kp LC(Y)  &kp UNDER            &kp TILDE  &kp LBKT  &kp RBKT  &kp AMPS  &kp AT
        &kp LC(A)  &kp LC(X)    &kp LC(C)  &kp LC(V)  &kp CARET            &kp BSLH   &kp LPAR  &kp RPAR  &kp EXCL  &kp QMARK
        &kp CAPS   &kp KP_NUM   &kp SLCK   &kp INS    &kp LC(LA(DEL))       &kp DLLR   &kp LBRC  &kp RBRC  &kp PIPE  &kp HASH
                                          &kp ESC  &trans                 &trans  &kp DEL
        >;
        };

        right_layer {
        bindings = <
        &kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT             &kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN
        &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN           &kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
        &kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH             &kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
                      &mo 3 &kp LCTL                &kp SPC  &mo 2
        >;
        };

        tri_layer {
        bindings = <
        &kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5             &trans &trans   &trans   &trans  &trans
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                          &trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans
        &bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7                 &trans &kp PG_DN  &kp K_VOL_DN  &trans &trans
                     &trans &trans                      &trans &trans
        >;
        };

    };
};
